name: prepare-release

on:
  workflow_dispatch:
    # Determine the version number that will be assigned to the release. During the beta phase, we increment
    # the minor version number and set the patch number to 0.
    inputs:
      candidate-stable:
        required: true
        description: Release candidate version (stable)
      current-stable:
        required: true
        description: Current version (stable)
      candidate-beta:
        required: true
        description: Release candidate version (stable)
      current-beta:
        required: true
        description: Current version (stable)

#     Create a branch named release/<release-series> (e.g. release/v0.45.x) from the changelog update commit and push to open-telemetry/opentelemetry-collector.
#     Tag all the module groups (stable, beta) with the new release version by running the make push-tags command (e.g. make push-tags MODSET=stable and make push-tags MODSET=beta). Wait for the new tag build to pass successfully.
#     The release script for the collector builder should create a new GitHub release for the builder. This is a separate release from the core, but we might join them in the future if it makes sense.
#     A new v0.55.0 release should be automatically created on Github by now. Edit it and use the contents from the CHANGELOG.md as the release's description. At the top of the release's changelog, add a link to the releases repository where the binaries and other artifacts are landing, like:

jobs:
  # Releasing opentelemetry-collector
  prepare-release:
    runs-on: ubuntu-latest
    steps:
      # To keep track of the progress, it might be helpful to create a tracking issue similar to #6067. You are responsible
      # for all of the steps under the "Performed by collector release manager" heading. Once the issue is created, you can
      # create the individual ones by hovering them and clicking the "Convert to issue" button on the right hand side.
      - name: Create issue for tracking release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CANDIDATE_BETA: ${{ inputs.candidate-beta }}
          CANDIDATE_STABLE: ${{ inputs.candidate-stable }}
          REPO: codeboten/opentelemetry-collector
        run: |
          EXISTING_ISSUE=$( gh issue list --search "Release v${CANDIDATE_BETA}/v${CANDIDATE_STABLE}" --json url --jq '.[].url' --repo ${REPO} )
          if [ "${EXISTING_ISSUE}" != "" ]; then
            echo "Issue already exists: ${EXISTING_ISSUE}"
            exit 0
          fi
          gh issue create -a ${GITHUB_ACTOR} --repo ${REPO} --label release --title "Release v${CANDIDATE_BETA}/v${CANDIDATE_STABLE}" --body "Like #4522, but for v${CANDIDATE_BETA}/v${CANDIDATE_STABLE}
          **Performed by collector release manager**

          - [ ] Prepare stable core release v${CANDIDATE_STABLE}
          - [ ] Prepare beta core release v${CANDIDATE_BETA}
          - [ ] Tag and release stable core v${CANDIDATE_STABLE}
          - [ ] Tag and release beta core v${CANDIDATE_BETA}
          - [ ] Prepare contrib release v${CANDIDATE_BETA}
          - [ ] Tag and release contrib v${CANDIDATE_BETA}
          - [ ] Prepare otelcol-releases v${CANDIDATE_BETA}
          - [ ] Release binaries and container images v${CANDIDATE_BETA}

          **Performed by operator maintainers**

          - [ ] Release the operator v${CANDIDATE_BETA}

          **Performed by helm chart maintainers**

          - [ ] Update the opentelemetry-collector helm chart to use v${CANDIDATE_BETA}"
      # Make sure that there are no open issues with release:blocker label in Core. The release has to be delayed until they are resolved.
      - name: Check blockers in core
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: open-telemetry/opentelemetry-collector
        run: |
          BLOCKERS=$( gh issue list --search "label:release:blocker" --json url --jq '.[].url' --repo ${REPO} )
          if [ "${BLOCKERS}" != "" ]; then
              echo "Release blockers in ${REPO} repo: ${BLOCKERS}"
              exit 1
          fi
      # Make sure that there are no open issues with release:blocker label in Contrib. The release has to be delayed until they are resolved.
      - name: Check blockers in contrib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: open-telemetry/opentelemetry-collector-contrib
        run: |
          BLOCKERS=$( gh issue list --search "label:release:blocker" --json url --jq '.[].url' --repo ${REPO} )
          if [ "${BLOCKERS}" != "" ]; then
              echo "Release blockers in ${REPO} repo: ${BLOCKERS}"
              exit 1
          fi
      # Make sure the current main branch build successfully passes (Core).
      - name: Check build status in core
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: open-telemetry/opentelemetry-collector
        run: |
          RESULT=$(gh run list --branch main --json status --jq '[.[] | select(.status != "queued" and .status != "in_progress")][0].status' --workflow build-and-test --repo ${REPO} )
          if [ "${RESULT}" != "completed" ]; then
              echo "Build status in ${REPO} is not completed: ${RESULT}"
              echo "$(gh run list --branch main --json status,url --jq '[.[] | select(.status != "queued" and .status != "in_progress")][0].url' --workflow build-and-test --repo ${REPO} )"
              exit 1
          fi
      # Make sure the current main branch build successfully passes (Contrib).
      - name: Check build status in contrib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: open-telemetry/opentelemetry-collector-contrib
        run: |
          RESULT=$(gh run list --branch main --json status --jq '[.[] | select(.status != "queued" and .status != "in_progress")][0].status' --workflow build-and-test --repo ${REPO} )
          if [ "${RESULT}" != "completed" ]; then
              echo "Build status in ${REPO} is not completed: ${RESULT}"
              echo "$(gh run list --branch main --json status,url --jq '[.[] | select(.status != "queued" and .status != "in_progress")][0].url' --workflow build-and-test --repo ${REPO} )"
              exit 1
          fi
      # Update Contrib to use the latest in development version of Core. Run make update-otel in
      # Contrib root directory and if it results in any changes, submit a PR. Open this PR as draft.
      # This is to ensure that the latest core does not break contrib in any way. Weâ€™ll update it
      # once more to the final release number later.
      - name: Make update-otel in contrib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: open-telemetry/opentelemetry-collector-contrib
        run: "echo TODO" # TODO: This may require a webhook in contrib
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      # Prepare Core for release.
      #   - Update CHANGELOG.md file, this is done via chloggen
      #   - Run make prepare-release PREVIOUS_VERSION=1.0.0 RELEASE_CANDIDATE=1.1.0 MODSET=stable
      #   - Run make prepare-release PREVIOUS_VERSION=0.52.0 RELEASE_CANDIDATE=0.53.0 MODSET=beta
      - name: Prepare release for core
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: open-telemetry/opentelemetry-collector
          CANDIDATE_BETA: ${{ inputs.candidate-beta }}
          CANDIDATE_STABLE: ${{ inputs.candidate-stable }}
          CURRENT_BETA: ${{ inputs.current-beta }}
          CURRENT_STABLE: ${{ inputs.current-stable }}
        run: |
          make chlog-install
          make chlog-update VERSION=${CANDIDATE_BETA}/${CANDIDATE_STABLE}
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add --all
          git commit -m "Changelog update ${CANDIDATE_BETA}/${CANDIDATE_STABLE}"
          make prepare-release GH=none PREVIOUS_VERSION=${CURRENT_STABLE} RELEASE_CANDIDATE=${CANDIDATE_STABLE} MODSET=stable
          make prepare-release GH=none PREVIOUS_VERSION=${CURRENT_BETA} RELEASE_CANDIDATE=${CANDIDATE_BETA} MODSET=beta
          git push origin "prepare-release-prs/${CANDIDATE_BETA}-${CANDIDATE_STABLE}"
          gh pr create --title "[chore] Prepare release ${CANDIDATE_BETA}/${CANDIDATE_STABLE}"
